FROM ubuntu:noble AS installer

ENV DEBIAN_FRONTEND=noninteractive

USER root

# Install Python build dependencies
RUN set -xe; \
  apt-get update -y && \
  apt-get install -y \
    build-essential \
    curl \
    git \
    libbz2-dev \
    libgdbm-dev \
    libffi-dev \
    liblzma-dev \
    libncursesw5-dev \
    libnss3-dev \
    libreadline-dev \
    libsqlite3-dev \
    libssl-dev \
    libxmlsec1-dev \
    libxml2-dev \
    llvm \
    make \
    tk-dev \
    wget \
    xz-utils \
    zlib1g-dev

# Create non-root user
ARG PUID=1000
ENV PUID=${PUID}
ARG PGID=1000
ENV PGID=${PGID}

USER ubuntu

ENV HOME=/home/ubuntu

WORKDIR ${HOME}

# Install pyenv
RUN set -xe; \
  curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash

ARG PYTHON_VERSION=3.13
ENV PYTHON_VERSION=${PYTHON_VERSION}

RUN set -xe; \
  ${HOME}/.pyenv/bin/pyenv install ${PYTHON_VERSION}

FROM eclipse-temurin:21-jdk-noble

ENV DEBIAN_FRONTEND=noninteractive

USER root

ARG PUID=1000
ENV PUID=${PUID}
ARG PGID=1000
ENV PGID=${PGID}

# Set system environment variables
ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# Set timezone
ARG TZ=UTC
ENV TZ=${TZ}

RUN ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && echo ${TZ} > /etc/timezone

# Install essentials
RUN set -xe; \
    apt-get update -y && \
    apt-get install -y \
    build-essential \
    curl \
    git \
    ripgrep \
    unzip \
    zsh && \
    chsh -s $(which zsh) && \
    sh -c "$(curl -fsSL https://starship.rs/install.sh)" -y -f

# Install Neovim
RUN set -xe; \
    curl -LO https://github.com/neovim/neovim/releases/download/nightly/nvim-linux-x86_64.tar.gz && \
    tar -xf nvim-linux-x86_64.tar.gz && \
    mv nvim-linux-x86_64 /opt/nvim

USER ubuntu

ENV HOME=/home/ubuntu
ENV ZSH_CUSTOM=${HOME}/.oh-my-zsh/custom

WORKDIR ${HOME}

COPY --from=installer --chown=${PUID}:${PGID} ${HOME}/.pyenv ${HOME}/.pyenv

# Add pyenv to PATH
RUN set -xe; echo '\n\
export PYENV_ROOT="${HOME}/.pyenv" \n\
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH" \n\
eval "$(pyenv init -)" \n\
' >> ${HOME}/.zshrc

# Setup zsh
RUN set -xe; \
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" && \
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM}/plugins/zsh-autosuggestions

COPY --chown=${PUID}:${PGID} .zshrc ${HOME}

# Powerline fonts
RUN set -xe; \
    mkdir -p \
    ${HOME}/Projects \
    ${HOME}/.local/share/fonts \
    ${HOME}/.config/fontconfig/conf.d && \
    curl -O https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf && \
    curl -O https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf && \
    mv PowerlineSymbols.otf ${HOME}/.local/share/fonts/ && \
    mv 10-powerline-symbols.conf ${HOME}/.config/fontconfig/conf.d/

# Neovim config files
COPY --chown=${PUID}:${PGID} nvim ${HOME}/.config/nvim
COPY --chown=${PUID}:${PGID} starship.toml ${HOME}/.config

ARG JDTLS_VERSION=1.52.0-202510230337
ENV JDTLS_VERSION=${JDTLS_VERSION}

# Install eclipse.jdt.ls
RUN set -xe; \
  mkdir -p ${HOME}/.local/share/eclipse/jdtls ${HOME}/.local/share/jdtls/workspace && \
  curl -LO https://projectlombok.org/downloads/lombok.jar && \
  curl -L -o jdtls-${JDTLS_VERSION}.tar.gz \
    https://www.eclipse.org/downloads/download.php?file=/jdtls/snapshots/jdt-language-server-${JDTLS_VERSION}.tar.gz && \
  mv lombok.jar ${HOME}/.local/share && \
  tar -xvzf jdtls-${JDTLS_VERSION}.tar.gz -C ${HOME}/.local/share/eclipse/jdtls && \
  rm -f jdtls-${JDTLS_VERSION}.tar.gz

ARG JAVA_DEBUG_VERSION=0.58.2
ENV JAVA_DEBUG_VERSION=${JAVA_DEBUG_VERSION}

USER root

# Clean up
RUN apt-get clean && \
	rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
	rm /var/log/lastlog /var/log/faillog

RUN chown -R ${PUID}:${PUID} ${HOME}/.config/nvim ${HOME}/.local

USER ubuntu

WORKDIR ${HOME}/Projects

ENTRYPOINT ["/usr/bin/zsh"]
