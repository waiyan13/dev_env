FROM debian:11-slim AS installer

ENV DEBIAN_FRONTEND noninteractive

USER root

# Install Python build dependencies
RUN set -xe; \
  apt-get update -y && \
  apt-get install -y \
    build-essential \
    curl \
    git \
    libbz2-dev \
    libgdbm-dev \
    libffi-dev \
    liblzma-dev \
    libncursesw5-dev \
    libnss3-dev \
    libreadline-dev \
    libsqlite3-dev \
    libssl-dev \
    libxmlsec1-dev \
    libxml2-dev \
    llvm \
    make \
    tk-dev \
    wget \
    xz-utils \
    zlib1g-dev

# Set system environment variables
ENV LANG=C.UTF-8 \
  LC_ALL=C.UTF-8

# Create non-root user
ARG PUID=1000
ENV PUID=${PUID}
ARG PGID=1000
ENV PGID=${PGID}

# Create user
RUN groupadd --gid ${PGID} dev && \
  useradd \
    --create-home \
    --home /home/dev \
    --shell /bin/bash \
    --uid ${PUID} \
    --gid dev \
    dev

USER dev

ENV HOME=/home/dev

WORKDIR ${HOME}

# Install pyenv
RUN set -xe; \
  curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash

ARG PYTHON_VERSION=3.11.9
ENV PYTHON_VERSION=${PYTHON_VERSION}

RUN set -xe; \
  ${HOME}/.pyenv/bin/pyenv install ${PYTHON_VERSION}

FROM debian:11-slim

ENV DEBIAN_FRONTEND noninteractive

USER root
 
# Create non-root user
ARG PUID=1000
ENV PUID=${PUID}
ARG PGID=1000
ENV PGID=${PGID}

# Create user
RUN groupadd --gid ${PGID} dev && \
  useradd \
    --create-home \
    --home /home/dev \
    --shell /bin/bash \
    --uid ${PUID} \
    --gid dev \
    dev

# Set timezone
ARG TZ=UTC
ENV TZ=${TZ}

RUN ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && echo ${TZ} > /etc/timezone

# Install essentials
RUN set -xe; \
  apt-get update -y && \
  apt-get install -y \
    build-essential \
    curl \
    git \
    libsqlite3-dev \
    lsb-release \
    ripgrep \
    zsh && \
  chsh -s $(which zsh) && \
  sh -c "$(curl -fsSL https://starship.rs/install.sh)" -y -f

# Install Tesseract
RUN set -xe; \
  install -m 0755 -d /etc/apt/keyrings && \
  curl -fsSL https://notesalexp.org/debian/alexp_key.asc -o /etc/apt/keyrings/alexp_key.asc && \
  chmod a+r /etc/apt/keyrings/alexp_key.asc && \
  echo "deb [signed-by=/etc/apt/keyrings/alexp_key.asc] https://notesalexp.org/tesseract-ocr5/$(lsb_release -cs)/ \
  $(lsb_release -cs) main" | \
  tee /etc/apt/sources.list.d/notesalexp.list > /dev/null && \
  apt-get update -yqq && \
  apt-get install -yqq tesseract-ocr

# Set system environment variables
ENV LANG=C.UTF-8 \
  LC_ALL=C.UTF-8 \
  PYTHONDONTWRITEBYTECODE=1\
  PYTHONFAULTHANDLER=1

# Install Neovim
RUN set -xe; \
  curl -OL https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage && \
  chmod ugo+x nvim.appimage && \
  mv nvim.appimage /usr/local/bin

USER dev

ENV HOME=/home/dev
ENV NVM_DIR=${HOME}/.nvm
ENV ZSH_CUSTOM=${HOME}/.oh-my-zsh/custom

WORKDIR ${HOME}

ARG PYTHON_VERSION=3.11.9
ARG PYTHON_REF_VERSION=3.11
ENV PYTHON_VERSION=${PYTHON_VERSION}
ENV PYTHON_REF_VERSION=${PYTHON_REF_VERSION}

COPY --chown=${PUID}:${PGID} --from=installer ${HOME}/.pyenv ${HOME}/.pyenv

# Install Poetry & LSP
RUN set -xe; \
  ${HOME}/.pyenv/bin/pyenv global ${PYTHON_VERSION} && \
  ${HOME}/.pyenv/bin/pyenv exec pip install --upgrade --user pip && \
  ${HOME}/.pyenv/bin/pyenv exec pip install --user pyright debugpy && \
  curl -sSL https://install.python-poetry.org | ${HOME}/.pyenv/shims/python${PYTHON_REF_VERSION} - && \
  ${HOME}/.local/bin/poetry config virtualenvs.in-project true

# Setup zsh
RUN set -xe; \
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" && \
  git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM}/plugins/zsh-autosuggestions

COPY --chown=${PUID}:${PGID} .zshrc ${HOME}/

# Add pyenv to PATH
RUN echo '\n\
export PYENV_ROOT="${HOME}/.pyenv" \n\
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH" \n\
eval "$(pyenv init -)" \n\
' >> ${HOME}/.zshrc

COPY --chown=${PUID}:${PGID} nvim ${HOME}/.config/nvim/
COPY --chown=${PUID}:${PGID} starship.toml ${HOME}/.config

# Install NVM
RUN mkdir -p ${NVM_DIR} && \
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash && \
  . ${NVM_DIR}/nvm.sh

RUN echo '\n\
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")" \n\
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" \n\
' >> ${HOME}/.zshrc

ARG NODE_VERSION=node
ENV NODE_VERSION=${NODE_VERSION}

RUN set -xe; \
  . ${NVM_DIR}/nvm.sh && \
  nvm install ${NODE_VERSION} && \
  nvm use ${NODE_VERSION} && \
  npm install -g \
    npm@latest \
    pyright

# Powerline fonts
RUN set -xe; \
  mkdir -p \
    ${HOME}/Projects \
    ${HOME}/.local/share/fonts \
    ${HOME}/.config/fontconfig/conf.d && \
  curl -O https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf && \
  curl -O https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf && \
  mv PowerlineSymbols.otf ${HOME}/.local/share/fonts/ && \
  mv 10-powerline-symbols.conf ${HOME}/.config/fontconfig/conf.d/

USER root

# Clean up
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    rm /var/log/lastlog /var/log/faillog

USER dev

WORKDIR ${HOME}/Projects
