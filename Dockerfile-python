ARG PYTHON_VERSION=3.12
FROM python:${PYTHON_VERSION}-bookworm

ENV DEBIAN_FRONTEND noninteractive

USER root

# Create non-root user
ARG PUID=1000
ENV PUID=${PUID}
ARG PGID=1000
ENV PGID=${PGID}

# Create user
RUN groupadd --gid ${PGID} dev && \
  useradd \
    --create-home \
    --home /home/dev \
    --shell /bin/bash \
    --uid ${PUID} \
    --gid dev \
    dev

# Set timezone
ARG TZ=UTC
ENV TZ=${TZ}

RUN ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && echo ${TZ} > /etc/timezone

# Install essentials
RUN set -xe; \
  apt-get update -y && \
  apt-get install -y \
    ca-certificates \
    curl \
    git \
    libsqlite3-dev \
    lsb-release \
    ripgrep \
    zsh && \
  chsh -s $(which zsh) && \
  sh -c "$(curl -fsSL https://starship.rs/install.sh)" -y -f

# Install Tesseract
RUN set -xe; \
  install -m 0755 -d /etc/apt/keyrings && \
  curl -fsSL https://notesalexp.org/debian/alexp_key.asc -o /etc/apt/keyrings/alexp_key.asc && \
  chmod a+r /etc/apt/keyrings/alexp_key.asc && \
  echo "deb [signed-by=/etc/apt/keyrings/alexp_key.asc] https://notesalexp.org/tesseract-ocr5/$(lsb_release -cs)/ \
  $(lsb_release -cs) main" | \
  tee /etc/apt/sources.list.d/notesalexp.list > /dev/null && \
  apt-get update -yqq && \
  apt-get install -yqq tesseract-ocr

# Set system environment variables
ENV LANG=C.UTF-8 \
  LC_ALL=C.UTF-8 \
  PYTHONDONTWRITEBYTECODE=1\
  PYTHONFAULTHANDLER=1

# Install Neovim
RUN set -xe; \
  curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim-linux-arm64.appimage -o nvim.appimage && \
  chmod ugo+x nvim.appimage && \
  mv nvim.appimage /usr/local/bin

USER dev

ENV HOME=/home/dev
ENV NVM_DIR=${HOME}/.nvm
ENV ZSH_CUSTOM=${HOME}/.oh-my-zsh/custom
ENV PATH="/home/dev/.local/bin/:$PATH"

WORKDIR ${HOME}

# Setup zsh
RUN set -xe; \
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" && \
  git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM}/plugins/zsh-autosuggestions

COPY --chown=${PUID}:${PGID} .zshrc ${HOME}/
COPY --chown=${PUID}:${PGID} nvim ${HOME}/.config/nvim/
COPY --chown=${PUID}:${PGID} starship.toml ${HOME}/.config

# Install NVM
RUN mkdir -p ${NVM_DIR} && \
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash && \
  . ${NVM_DIR}/nvm.sh

RUN echo '\n\
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")" \n\
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" \n\
' >> ${HOME}/.zshrc

ARG NODE_VERSION=node
ENV NODE_VERSION=${NODE_VERSION}

RUN set -xe; \
  . ${NVM_DIR}/nvm.sh && \
  nvm install ${NODE_VERSION} && \
  nvm use ${NODE_VERSION} && \
  npm install -g \
    npm@latest \
    pyright

# Powerline fonts
RUN set -xe; \
  mkdir -p \
    ${HOME}/Projects \
    ${HOME}/.local/share/fonts \
    ${HOME}/.config/fontconfig/conf.d && \
  curl -O https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf && \
  curl -O https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf && \
  mv PowerlineSymbols.otf ${HOME}/.local/share/fonts/ && \
  mv 10-powerline-symbols.conf ${HOME}/.config/fontconfig/conf.d/

ARG UV_VERSION=0.6.5
ENV UV_VERSION=${UV_VERSION}

WORKDIR /home/python

# Install uv
RUN set -xe; \
  curl -LsSf https://astral.sh/uv/${UV_VERSION}/install.sh | sh

USER root

# Clean up
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    rm /var/log/lastlog /var/log/faillog

USER dev

WORKDIR ${HOME}/Projects
